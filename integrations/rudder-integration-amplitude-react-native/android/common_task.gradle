apply plugin: 'maven-publish'

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
        rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }

buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    // ref: https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_script_external_dependencies
    if (project == rootProject) {
        repositories {
            google()
            mavenCentral()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:7.2.1'
            classpath 'com.google.gms:google-services:4.3.3'
        }
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        missingDimensionStrategy 'rudderstack_rudder-sdk-react-native', 'release'

        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    // ref: https://www.baeldung.com/maven-local-repository
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
    mavenCentral()
}


afterEvaluate { project ->
    // some Gradle build hooks ref:
    // https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch03.html
    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        project.getConfigurations().getByName('releaseImplementation').setCanBeResolved(true)
        println("config-" + project.getConfigurations())
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('releaseImplementation').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        def javaCompileTask = variant.javaCompileProvider.get()

        task "jar${name}"(type: Jar, dependsOn: javaCompileTask) {
            from javaCompileTask.destinationDir
        }
    }

    
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)
    repositories{
        maven {
            name = packageJson.title
            // Deploy to react-native-event-bridge/maven, ready to publish to npm
            url = "file://${projectDir}/../android/maven"
        }

    }
    publishing {
        publications {
            release(MavenPublication) {
                println("components ->" + components)
                from components.release
                pom {
                    name = packageJson.title
                    artifactId = packageJson.name
                    version = packageJson.version
                    group = GROUP_NAME
                    description = packageJson.description
                    url = packageJson.repository.baseUrl

                    licenses {
                        license {
                            name = packageJson.license
                            url = packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = packageJson.author.username
                            name = packageJson.author.name
                        }
                    }
                }
                artifact(androidSourcesJar)
                artifact(androidJavadocJar)
            }
        }
    }
}